includeCustomResources: false  # set to true to have the custom resources (KnativeEventing, KnativeServing, SonataFlow and SonataFlowPlatform).

sonataFlowOperator:
  enabled: true  # whether the operator should be deployed by the chart
  subscription:
    namespace: openshift-operators  # namespace where the operator should be deployed
    channel: alpha  # channel of an operator package to subscribe to
    installPlanApproval: Automatic  # whether the update should be installed automatically
    pkgName: sonataflow-operator  # name of the operator package
    sourceImage: quay.io/masayag/kogito-serverless-operator-catalog:v2.0.0-snapshot  # catalog image of the development build. Unset it for the release build.
    sourceNamespace: openshift-marketplace # namespace of the catalog source
    source: sonataflow-operator  # name of the catalog source for the operator

serverlessOperator:
  enabled: true  # whether the operator should be deployed by the chart
  subscription:
    namespace: openshift-serverless  # namespace where the operator should be deployed
    channel: stable  # channel of an operator package to subscribe to
    installPlanApproval: Automatic  # whether the update should be installed automatically
    pkgName: serverless-operator # name of the operator package
    sourceNamespace: openshift-marketplace # namespace of the catalog source

postgres:
  externalPostgresDBHost: ""  # host name of an existing Postgres DB used by dataindex and job service. If empty, a local Postgres DB is deployed
  existingSecret: ""  # name of existing secret to use for PostgreSQL credentials. 
  secretKeys:
    userPasswordKey: password  # name of key in existing secret to use for PostgreSQL credentials. Only used when `existingSecret` is set.
  database: sonataflow  # database instance used by data index and job service
  username: postgres  # database user name 
  password: postgres  # database password. Ignored if existingSecret is set.
  storage: 2Gi # the database storage size
  serviceName: postgres-db-service # service name to access the database
  port: 5432  # service port to access the database
  dataDir: /var/lib/postgresql/data/dbfiles  # where the database data files are stored inside the container

# override Janus image with one with the orchestrator plugin
backstage:
  global:
    dynamic:
      includes:
        - dynamic-plugins.default.yaml
      plugins:
        - disabled: false
          integrity: >-
            sha512-uwGZRqe0IXFO9Xtsm106FxykFCIIa0htYIbo01yhUx4n2tjz6tvGhKGv7zeVaQYeGJ7AytQ1Y9p/xTHrF1PuZw==
          package: '@caponetto-tests/backstage-plugin-orchestrator-backend-dynamic@0.0.3'
          pluginConfig:
            orchestrator:
              sonataFlowService:
                # this value will be replaced with a link to the data-index service once supported by the plugin and the operator
                baseUrl: http://greeting.sonataflow-infra
                port: 80
                path: /
              editor:
                path: 'https://sandbox.kie.org/swf-chrome-extension/0.32.0'
        - disabled: false
          integrity: >-
            sha512-re4v8pu+97DEdv3MAELP0iehHSG2HxlmE/JA7Ss/3ZfcM5bcH85DlsLrZS7cGAMiZSkKUn3q9d360pTCyeyasQ==
          package: '@caponetto-tests/backstage-plugin-orchestrator@0.0.3'
          pluginConfig:
            dynamicPlugins:
              frontend:
                caponetto-tests.backstage-plugin-orchestrator:
                  appIcons:
                    - importName: OrchestratorIcon
                      module: OrchestratorPlugin
                      name: orchestratorIcon
                  dynamicRoutes:
                    - importName: OrchestratorPage
                      menuItem:
                        icon: orchestratorIcon
                        text: Orchestrator
                      module: OrchestratorPlugin
                      path: /orchestrator
  upstream:
    backstage:
      image:
        tag: next
      appConfig:
        integrations:
          github:
            - host: github.com
              token: "INSERT VALID TOKEN HERE"
        auth:
          environment: development
          providers:
            github:
              development:
                clientId: "INSERT VALID CLIENT ID HERE"
                clientSecret: "INSERT VALID CLIENT SECRET HERE"
        catalog:
          rules:
            - allow: [ Component, System, Group, Resource, Location, Template, API, User, Domain ]
          locations:
            - type: url
              target: https://github.com/parodos-dev/workflow-software-templates/blob/main/entities/workflow-resources.yaml
            - type: url
              target: https://github.com/parodos-dev/workflow-software-templates/blob/main/template/template.yaml
            - type: url
              target: https://github.com/janus-idp/software-templates/blob/main/showcase-templates.yaml
        backend:
          csp:
            frame-src:
              - 'https://sandbox.kie.org'

orchestrator:
  namespace: sonataflow-infra  # namespace where the data index, job service and workflows are deployed
  dataindex:
    image: quay.io/kiegroup/kogito-data-index-postgresql:1.42 # image for data index
    name: data-index-service # service name of the data index
    port: 8080  # service port of the data index
  jobsservice:
    image: quay.io/kiegroup/kogito-jobs-service-postgresql:1.44 # image for job service
    name: jobs-service-service  # service name of the job service
    port: 8080  # service port of the job service
  sonataPlatform:
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
  sonataflows: # workflows to get deployed - this option will be removed once the plugin will interact directly with the data-index
    - name: greeting
      image: quay.io/masayag/serverless-workflow-greeting:latest

